// AI-Powered Symptom Analysis Service
// File: features/disease-symptoms/services/symptomService.js

const { getGeminiResponse, detectLanguage } = require('../../../utils/aiUtils');

class SymptomService {
  
  // Check for emergency keywords using AI analysis
  static async checkEmergencyKeywords(text, language = 'en') {
    try {
      const emergencyKeywords = {
        en: [
          'severe chest pain', 'chest pain', 'heart attack', 'can\'t breathe', 'difficulty breathing',
          'shortness of breath', 'unconscious', 'heavy bleeding', 'severe bleeding', 'choking',
          'severe allergic reaction', 'anaphylaxis', 'stroke', 'seizure', 'severe burns',
          'poisoning', 'overdose', 'severe head injury', 'broken bones', 'severe abdominal pain'
        ],
        hi: [
          'рдЧрдВрднреАрд░ рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж', 'рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ', 'рдмреЗрд╣реЛрд╢реА', 'рднрд╛рд░реА рдЦреВрди рдмрд╣ рд░рд╣рд╛ рд╣реИ',
          'рджрд┐рд▓ рдХрд╛ рджреМрд░рд╛', 'рдЧрдВрднреАрд░ рдПрд▓рд░реНрдЬреА', 'рд▓рдХрд╡рд╛', 'рджреМрд░рд╛', 'рдЧрдВрднреАрд░ рдЬрд▓рди'
        ],
        te: [
          'р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░Ыр░╛р░др▒А р░ир▒Кр░кр▒Нр░кр░┐', 'р░╢р▒Нр░╡р░╛р░╕ р░др▒Ар░╕р▒Бр░Хр▒Лр░╡р░бр░Вр░▓р▒Л р░Зр░мр▒Нр░мр░Вр░жр░┐', 'р░Ер░кр░╕р▒Нр░ор░╛р░░р░Х р░╕р▒Нр░ер░┐р░др░┐',
          'р░Ер░зр░┐р░Х р░░р░Хр▒Нр░др░╕р▒Нр░░р░╛р░╡р░В', 'р░Чр▒Бр░Вр░бр▒Жр░кр▒Лр░Яр▒Б', 'р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░Ер░▓р▒Жр░░р▒Нр░Ьр▒А'
        ],
        ta: [
          'роХроЯрпБроорпИропро╛рой рооро╛ро░рпНрокрпБ ро╡ро▓ро┐', 'роорпВроЪрпНроЪрпБродрпН родро┐рогро▒ро▓рпН', 'рооропроХрпНроХроорпН', 'роЕродро┐роХ роЗро░родрпНродрокрпНрокрпЛроХрпНроХрпБ',
          'рооро╛ро░роЯрпИрокрпНрокрпБ', 'роХроЯрпБроорпИропро╛рой роТро╡рпНро╡ро╛роорпИ'
        ]
      };

      const lowerText = text.toLowerCase();
      const keywords = emergencyKeywords[language] || emergencyKeywords.en;
      
      for (const keyword of keywords) {
        if (lowerText.includes(keyword.toLowerCase())) {
          const emergencyResponses = {
            en: 'ЁЯЪи EMERGENCY: You mentioned symptoms that may require immediate medical attention. Please seek immediate medical help or call emergency services (108 in India, 911 in US).',
            hi: 'ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓: рдЖрдкрдиреЗ рдРрд╕реЗ рд▓рдХреНрд╖рдг рдмрддрд╛рдП рд╣реИрдВ рдЬрд┐рдирдореЗрдВ рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛ рд╕рдХрддреА рд╣реИред рдХреГрдкрдпрд╛ рддреБрд░рдВрдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВ рдпрд╛ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВ (108)ред',
            te: 'ЁЯЪи р░Ер░др▒Нр░пр░╡р░╕р░░р░В: р░ор▒Ар░░р▒Б р░др░Хр▒Нр░╖р░г р░╡р▒Ир░жреНр░п р░╕р░╣р░╛р░пр░В р░Ер░╡р░╕р░░р░ор▒Ир░и р░▓р░Хр▒Нр░╖р░гр░╛р░▓р░ир▒Б р░кр▒Зр░░р▒Нр░Хр▒Кр░ир▒Нр░ир░╛р░░р▒Бред р░жр░пр░Ър▒Зр░╕р░┐ р░╡р▒Жр░Вр░Яр░ир▒З р░╡р▒Ир░жр▒Нр░п р░╕р░╣р░╛р░пр░В р░кр▒Кр░Вр░жр░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░Ер░др▒Нр░пр░╡р░╕р░░ р░╕р▒Зр░╡р░▓р░Хр▒Б р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐ (108)ред',
            ta: 'ЁЯЪи роЕро╡роЪро░роиро┐ро▓рпИ: роирпАроЩрпНроХро│рпН роЙроЯройроЯро┐ рооро░рпБродрпНродрпБро╡ роХро╡ройро┐рокрпНрокрпБ родрпЗро╡рпИрокрпНрокроЯрпБроорпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИроХрпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯрпБро│рпНро│рпАро░рпНроХро│рпН. роЙроЯройроЯро┐ропро╛роХ рооро░рпБродрпНродрпБро╡ роЙродро╡ро┐ рокрпЖро▒ро╡рпБроорпН роЕро▓рпНро▓родрпБ роЕро╡роЪро░ роЪрпЗро╡рпИроХро│рпИ роЕро┤рпИроХрпНроХро╡рпБроорпН (108)ред'
          };
          
          return {
            isEmergency: true,
            severity: 'critical',
            response: emergencyResponses[language] || emergencyResponses.en,
            keyword: keyword
          };
        }
      }
      
      return { isEmergency: false };
    } catch (error) {
      console.error('Emergency keyword check error:', error);
      return { isEmergency: false };
    }
  }

  // AI-powered symptom analysis and disease prediction
  static async analyzeSymptoms(symptomText, language = 'en') {
    try {
      const languageMap = {
        'en': 'English',
        'hi': 'Hindi', 
        'te': 'Telugu',
        'ta': 'Tamil',
        'bn': 'Bengali',
        'mr': 'Marathi'
      };

      const targetLanguage = languageMap[language] || 'English';
      
      const prompt = `You are a medical AI assistant for symptom analysis. Analyze these symptoms and provide a structured response in ${targetLanguage}.

Symptoms: "${symptomText}"

Provide your analysis in this EXACT JSON format:
{
  "emergency_level": "low/medium/high/critical",
  "most_likely_conditions": [
    {
      "name": "condition name",
      "confidence": 0.85,
      "description": "brief description"
    }
  ],
  "recommendations": [
    "specific recommendation 1",
    "specific recommendation 2"
  ],
  "when_to_seek_help": "guidance on when to see a doctor",
  "red_flags": ["warning sign 1", "warning sign 2"],
  "disclaimer": "This is for informational purposes only, not medical diagnosis"
}

IMPORTANT:
- Keep response under 300 words total
- Use simple, clear language
- Include 2-3 most likely conditions max
- Always include disclaimer
- If symptoms suggest emergency, set emergency_level to "high" or "critical"`;

      const response = await getGeminiResponse(prompt, language);
      
      // Try to parse JSON response
      try {
        const analysisResult = JSON.parse(response);
        return analysisResult;
      } catch (parseError) {
        // Fallback if AI doesn't return proper JSON
        return this.generateFallbackAnalysis(symptomText, language);
      }
    } catch (error) {
      console.error('AI symptom analysis error:', error);
      return this.generateFallbackAnalysis(symptomText, language);
    }
  }

  // Generate fallback analysis when AI fails
  static generateFallbackAnalysis(symptomText, language = 'en') {
    const fallbackResponses = {
      en: {
        emergency_level: "medium",
        most_likely_conditions: [
          {
            name: "Common viral infection",
            confidence: 0.6,
            description: "Symptoms may indicate a common viral illness"
          }
        ],
        recommendations: [
          "Rest and stay hydrated",
          "Monitor symptoms for changes",
          "Take over-the-counter medications as needed"
        ],
        when_to_seek_help: "Consult a doctor if symptoms worsen or persist for more than 3-5 days",
        red_flags: ["High fever over 103┬░F", "Difficulty breathing", "Severe pain"],
        disclaimer: "This is for informational purposes only, not medical diagnosis. Consult a healthcare provider for proper evaluation."
      },
      hi: {
        emergency_level: "medium",
        most_likely_conditions: [
          {
            name: "рд╕рд╛рдорд╛рдиреНрдп рд╡рд╛рдпрд░рд▓ рд╕рдВрдХреНрд░рдордг",
            confidence: 0.6,
            description: "рд▓рдХреНрд╖рдг рд╕рд╛рдорд╛рдиреНрдп рд╡рд╛рдпрд░рд▓ рдмреАрдорд╛рд░реА рдХрд╛ рд╕рдВрдХреЗрдд рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ"
          }
        ],
        recommendations: [
          "рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рдкрд╛рдиреА рдкрд┐рдПрдВ",
          "рд▓рдХреНрд╖рдгреЛрдВ рдкрд░ рдирдЬрд░ рд░рдЦреЗрдВ",
          "рдЖрд╡рд╢реНрдпрдХрддрд╛рдиреБрд╕рд╛рд░ рджрд╡рд╛ рд▓реЗрдВ"
        ],
        when_to_seek_help: "рдпрджрд┐ рд▓рдХреНрд╖рдг рдмрд┐рдЧрдбрд╝рддреЗ рд╣реИрдВ рдпрд╛ 3-5 рджрд┐рди рд╕реЗ рдЕрдзрд┐рдХ рд░рд╣рддреЗ рд╣реИрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ",
        red_flags: ["103┬░F рд╕реЗ рдЕрдзрд┐рдХ рдмреБрдЦрд╛рд░", "рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ", "рдЧрдВрднреАрд░ рджрд░реНрдж"],
        disclaimer: "рдпрд╣ рдХреЗрд╡рд▓ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рд╣реИ, рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдирд┐рджрд╛рди рдирд╣реАрдВред рдЙрдЪрд┐рдд рдореВрд▓реНрдпрд╛рдВрдХрди рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗрд╡рд╛ рдкреНрд░рджрд╛рддрд╛ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред"
      }
    };
    
    return fallbackResponses[language] || fallbackResponses.en;
  }

  // Get detailed medical information using AI
  static async getDetailedMedicalInfo(condition, language = 'en') {
    try {
      const languageMap = {
        'en': 'English',
        'hi': 'Hindi',
        'te': 'Telugu', 
        'ta': 'Tamil',
        'bn': 'Bengali',
        'mr': 'Marathi'
      };

      const targetLanguage = languageMap[language] || 'English';
      
      const prompt = `Provide detailed medical information about "${condition}" in ${targetLanguage}. Include:

1. **Description**: What is this condition?
2. **Common Symptoms**: List 5-7 typical symptoms
3. **Causes**: What typically causes this condition?
4. **Treatment**: General treatment approaches (mention to consult doctor)
5. **Prevention**: How to prevent this condition
6. **When to seek help**: Red flags that require immediate medical attention

Keep the response informative but accessible to general public. Always emphasize consulting healthcare professionals for proper diagnosis and treatment.

Format in clear sections with emojis for better readability.`;

      const response = await getGeminiResponse(prompt, language);
      return response;
    } catch (error) {
      console.error('Get detailed medical info error:', error);
      
      const fallbackInfo = {
        en: `тД╣я╕П **About ${condition}**\n\nFor detailed information about this condition, please consult with a healthcare professional. They can provide accurate diagnosis, treatment options, and personalized medical advice.\n\nЁЯПе **When to seek help:**\nтАв If symptoms persist or worsen\nтАв If you experience severe pain\nтАв If you have concerns about your health\n\nЁЯУЮ **Emergency:** Call 108 (India) or your local emergency number for urgent medical situations.`,
        hi: `тД╣я╕П **${condition} рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ**\n\nрдЗрд╕ рд╕реНрдерд┐рддрд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╡рд┐рд╕реНрддреГрдд рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдХрд┐рд╕реА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред рд╡реЗ рд╕рдЯреАрдХ рдирд┐рджрд╛рди, рдЙрдкрдЪрд╛рд░ рд╡рд┐рдХрд▓реНрдк рдФрд░ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд▓рд╛рд╣ рдкреНрд░рджрд╛рди рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред`
      };
      
      return fallbackInfo[language] || fallbackInfo.en;
    }
  }

  // Main symptom processing function - AI-only approach
  static async processSymptoms(symptomText, language = 'en') {
    try {
      // Step 1: Check for emergency keywords
      const emergencyCheck = await this.checkEmergencyKeywords(symptomText, language);
      
      if (emergencyCheck.isEmergency) {
        return {
          type: 'emergency',
          message: emergencyCheck.response,
          severity: emergencyCheck.severity,
          keyword: emergencyCheck.keyword
        };
      }
      
      // Step 2: AI-powered symptom analysis
      const analysis = await this.analyzeSymptoms(symptomText, language);
      
      // Step 3: Format response based on analysis
      return this.formatAnalysisResponse(analysis, language);
      
    } catch (error) {
      console.error('Process symptoms error:', error);
      return this.generateErrorResponse(language);
    }
  }
  
  // Format AI analysis into user-friendly response
  static formatAnalysisResponse(analysis, language = 'en') {
    try {
      let message = '';
      
      // Emergency check from AI analysis
      if (analysis.emergency_level === 'high' || analysis.emergency_level === 'critical') {
        const emergencyMessages = {
          en: 'ЁЯЪи URGENT: Your symptoms may require immediate medical attention. Please seek emergency care or call 108 immediately.',
          hi: 'ЁЯЪи рддрддреНрдХрд╛рд▓: рдЖрдкрдХреЗ рд▓рдХреНрд╖рдгреЛрдВ рдореЗрдВ рддреБрд░рдВрдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛ рд╕рдХрддреА рд╣реИред рдХреГрдкрдпрд╛ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рджреЗрдЦрднрд╛рд▓ рд▓реЗрдВ рдпрд╛ 108 рдкрд░ рддреБрд░рдВрдд рдХреЙрд▓ рдХрд░реЗрдВред',
          te: 'ЁЯЪи р░Ер░др▒Нр░пр░╡р░╕р░░р░В: р░ор▒А р░▓р░Хр▒Нр░╖р░гр░╛р░▓р░Хр▒Б р░др░Хр▒Нр░╖р░г р░╡р▒Ир░жр▒Нр░п р░╕р░╣р░╛р░пр░В р░Ер░╡р░╕р░░р░В р░Хр░╛р░╡р░Ър▒Нр░Ър▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░Ер░др▒Нр░пр░╡р░╕р░░ р░╕р░Вр░░р░Хр▒Нр░╖р░г р░кр▒Кр░Вр░жр░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░╡р▒Жр░Вр░Яр░ир▒З 108р░Хр░┐ р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐ред',
          ta: 'ЁЯЪи роЕро╡роЪро░роорпН: роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпБроХрпНроХрпБ роЙроЯройроЯро┐ рооро░рпБродрпНродрпБро╡ роХро╡ройро┐рокрпНрокрпБ родрпЗро╡рпИрокрпНрокроЯро▓ро╛роорпН. роЕро╡роЪро░ роЪро┐роХро┐роЪрпНроЪрпИ рокрпЖро▒ро╡рпБроорпН роЕро▓рпНро▓родрпБ роЙроЯройроЯро┐ропро╛роХ 108 роР роЕро┤рпИроХрпНроХро╡рпБроорпН.'
        };
        
        return {
          type: 'emergency',
          message: emergencyMessages[language] || emergencyMessages.en,
          severity: 'critical'
        };
      }
      
      // Regular analysis response
      message += `ЁЯФН **Symptom Analysis Results**\n\n`;
      
      // Most likely conditions
      if (analysis.most_likely_conditions && analysis.most_likely_conditions.length > 0) {
        message += `**Most likely condition:** ${analysis.most_likely_conditions[0].name}\n`;
        if (analysis.most_likely_conditions[0].description) {
          message += `**Description:** ${analysis.most_likely_conditions[0].description}\n\n`;
        }
      }
      
      // Recommendations
      if (analysis.recommendations && analysis.recommendations.length > 0) {
        message += `**Recommendations:**\n`;
        analysis.recommendations.forEach((rec, index) => {
          message += `${index + 1}. ${rec}\n`;
        });
        message += '\n';
      }
      
      // When to seek help
      if (analysis.when_to_seek_help) {
        message += `тЪая╕П **When to seek help:** ${analysis.when_to_seek_help}\n\n`;
      }
      
      // Red flags
      if (analysis.red_flags && analysis.red_flags.length > 0) {
        message += `ЁЯЪй **Warning signs:**\n`;
        analysis.red_flags.forEach(flag => {
          message += `тАв ${flag}\n`;
        });
        message += '\n';
      }
      
      // Disclaimer
      message += `ЁЯУЛ **Important:** ${analysis.disclaimer || 'This is for informational purposes only. Consult a healthcare provider for proper diagnosis.'}`;
      
      return {
        type: 'analysis',
        message: message,
        confidence: analysis.most_likely_conditions?.[0]?.confidence || 0.6,
        emergency_level: analysis.emergency_level || 'low'
      };
      
    } catch (error) {
      console.error('Format analysis response error:', error);
      return this.generateErrorResponse(language);
    }
  }
  
  // Generate error response when AI fails
  static generateErrorResponse(language = 'en') {
    const errorResponses = {
      en: 'I apologize, but I encountered an error analyzing your symptoms. Please consult a healthcare provider for proper evaluation. For emergencies, call 108.',
      hi: 'рдореБрдЭреЗ рдЦреБрд╢реА рд╣реИ рдХрд┐ рдЖрдкрдиреЗ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд┐рдпрд╛ред рдХреГрдкрдпрд╛ рдЙрдЪрд┐рдд рдореВрд▓реНрдпрд╛рдВрдХрди рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗрд╡рд╛ рдкреНрд░рджрд╛рддрд╛ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред рдЖрдкрд╛рддрдХрд╛рд▓ рдХреЗ рд▓рд┐рдП 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВред',
      te: 'р░ор▒А р░▓р░Хр▒Нр░╖р░гр░╛р░▓р░ир▒Б р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░Вр░Ър░бр░Вр░▓р▒Л р░ир▒Зр░ир▒Б р░▓р▒Лр░кр░╛р░ир▒Нр░ир░┐ р░Ор░жр▒Бр░░р▒Нр░Хр▒Кр░ир▒Нр░ир░╛р░ир▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░╕р░░р▒Ир░и р░ор▒Вр░▓р▒Нр░пр░╛р░Вр░Хр░ир░В р░Хр▒Лр░╕р░В р░Жр░░р▒Лр░Чр▒Нр░п р░╕р▒Зр░╡р░╛ р░кр▒Нр░░р░жр░╛р░др░ир▒Б р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐. р░Ер░др▒Нр░пр░╡р░╕р░░ р░кр░░р░┐р░╕р▒Нр░ер░┐р░др▒Бр░▓р▒Нр░▓р▒Л 108р░Хр░┐ р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐ред',
      ta: 'роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНро╡родро┐ро▓рпН рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ. роЪро░ро┐ропро╛рой роородро┐рокрпНрокрпАроЯрпНроЯро┐ро▒рпНроХрпБ роЪрпБроХро╛родро╛ро░ ро╡ро┤роЩрпНроХрпБроиро░рпИ роЕрогрпБроХро╡рпБроорпН. роЕро╡роЪро░роиро┐ро▓рпИроХро│рпБроХрпНроХрпБ 108 роР роЕро┤рпИроХрпНроХро╡рпБроорпН.'
    };
    
    return {
      type: 'error',
      message: errorResponses[language] || errorResponses.en
    };
  }

  // Log symptom query for analytics (simplified without database)
  static async logSymptomQuery(queryData) {
    try {
      // Log to console for now (can be extended to file logging or external service)
      const logEntry = {
        timestamp: new Date().toISOString(),
        patient_id: queryData.patient_id,
        query_text: queryData.query_text,
        language: queryData.language || 'en',
        analysis_type: queryData.analysis_type || 'unknown',
        confidence_score: queryData.confidence_score || 0,
        emergency_triggered: queryData.emergency_triggered || false
      };
      
      console.log('Symptom Query Log:', JSON.stringify(logEntry, null, 2));
      return true;
    } catch (error) {
      console.error('Log symptom query error:', error);
      return false;
    }
  }

  // Get disease details using AI (no database dependency)
  static async getDiseaseDetails(conditionName, language = 'en') {
    try {
      return await this.getDetailedMedicalInfo(conditionName, language);
    } catch (error) {
      console.error('Get disease details error:', error);
      return null;
    }
  }

  // Get health awareness content using AI
  static async getHealthAwareness(topic, language = 'en') {
    try {
      const languageMap = {
        'en': 'English',
        'hi': 'Hindi',
        'te': 'Telugu',
        'ta': 'Tamil',
        'bn': 'Bengali',
        'mr': 'Marathi'
      };

      const targetLanguage = languageMap[language] || 'English';
      
      const prompt = `Generate health awareness content about "${topic}" in ${targetLanguage}. Include:

1. **Key Facts**: 3-4 important facts about this health topic
2. **Prevention Tips**: Practical prevention advice
3. **Warning Signs**: When to seek medical help
4. **Action Steps**: What people should do

Keep it concise, practical, and suitable for general public. Use simple language and include relevant emojis.

Format as a brief awareness message under 200 words.`;

      const response = await getGeminiResponse(prompt, language);
      return response;
    } catch (error) {
      console.error('Get health awareness error:', error);
      
      const fallbackAwareness = {
        en: `ЁЯПе **Health Awareness**\n\nStay informed about your health. Regular check-ups, healthy lifestyle, and early detection are key to preventing serious health issues.\n\nЁЯУЮ For medical emergencies, call 108.`,
        hi: `ЁЯПе **рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдЧрд░реВрдХрддрд╛**\n\nрдЕрдкрдиреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рд░рдЦреЗрдВред рдирд┐рдпрдорд┐рдд рдЬрд╛рдВрдЪ, рд╕реНрд╡рд╕реНрде рдЬреАрд╡рдирд╢реИрд▓реА рдФрд░ рд╢реБрд░реБрдЖрддреА рдкрд╣рдЪрд╛рди рдЧрдВрднреАрд░ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛рдУрдВ рдХреЛ рд░реЛрдХрдиреЗ рдХреА рдХреБрдВрдЬреА рд╣реИред\n\nЁЯУЮ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЖрдкрд╛рддрдХрд╛рд▓ рдХреЗ рд▓рд┐рдП 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВред`
      };
      
      return fallbackAwareness[language] || fallbackAwareness.en;
    }
  }
}

module.exports = SymptomService;
