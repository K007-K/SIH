// Safety Guardrails for Disease Symptoms Education
// File: features/disease-symptoms/utils/safetyGuards.js

const { supabase } = require('../../../config/database');

class SafetyGuards {
  
  // Critical emergency keywords that trigger immediate response
  static CRITICAL_KEYWORDS = {
    'en': [
      'chest pain', 'heart attack', 'can\'t breathe', 'difficulty breathing',
      'severe bleeding', 'unconscious', 'stroke', 'seizure', 'suicide',
      'overdose', 'poisoning', 'severe burn', 'broken bone', 'head injury'
    ],
    'hi': [
      'рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж', 'рджрд┐рд▓ рдХрд╛ рджреМрд░рд╛', 'рд╕рд╛рдВрд╕ рдирд╣реАрдВ рдЖ рд░рд╣реА', 'рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ',
      'рдЧрдВрднреАрд░ рд░рдХреНрддрд╕реНрд░рд╛рд╡', 'рдмреЗрд╣реЛрд╢', 'рд▓рдХрд╡рд╛', 'рджреМрд░рд╛', 'рдЖрддреНрдорд╣рддреНрдпрд╛',
      'рдУрд╡рд░рдбреЛрдЬ', 'рдЬрд╣рд░', 'рдЧрдВрднреАрд░ рдЬрд▓рди', 'рд╣рдбреНрдбреА рдЯреВрдЯреА', 'рд╕рд┐рд░ рдХреА рдЪреЛрдЯ'
    ],
    'te': [
      'р░Ыр░╛р░др▒А р░ир▒Кр░кр▒Нр░кр░┐', 'р░Чр▒Бр░Вр░бр▒Жр░кр▒Лр░Яр▒Б', 'р░Кр░кр░┐р░░р░┐ р░░р░╛р░▓р▒Зр░жр▒Б', 'р░╢р▒Нр░╡р░╛р░╕ р░др▒Ар░╕р▒Бр░Хр▒Лр░╡р░бр░Вр░▓р▒Л р░Зр░мр▒Нр░мр░Вр░жр░┐',
      'р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░░р░Хр▒Нр░др░╕р▒Нр░░р░╛р░╡р░В', 'р░Ер░кр░╕р▒Нр░ор░╛р░░р░Х', 'р░кр░Хр▒Нр░╖р░╡р░╛р░др░В', 'р░ор▒Вр░░р▒Нр░Ы', 'р░Жр░др▒Нр░ор░╣р░др▒Нр░п',
      'р░Ер░зр░┐р░Х р░ор▒Лр░др░╛р░жр▒Б', 'р░╡р░┐р░╖р░В', 'р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░Хр░╛р░▓р░┐р░и р░Чр░╛р░пр░В', 'р░Ор░ор▒Бр░Х р░╡р░┐р░░р░┐р░Чр░┐р░Вр░жр░┐', 'р░др░▓ р░Чр░╛р░пр░В'
    ],
    'ta': [
      'рооро╛ро░рпНрокрпБ ро╡ро▓ро┐', 'рооро╛ро░роЯрпИрокрпНрокрпБ', 'роорпВроЪрпНроЪрпБ ро╡ро░ро╡ро┐ро▓рпНро▓рпИ', 'роорпВроЪрпНроЪрпБ ро╡ро┐роЯрпБро╡родро┐ро▓рпН роЪро┐ро░роороорпН',
      'роХроЯрпБроорпИропро╛рой роЗро░родрпНродрокрпНрокрпЛроХрпНроХрпБ', 'рооропроХрпНроХроорпН', 'рокроХрпНроХро╡ро╛родроорпН', 'ро╡ро▓ро┐рокрпНрокрпБ', 'родро▒рпНроХрпКро▓рпИ',
      'роЕро│ро╡рпБроХрпНроХрпБ роЕродро┐роХрооро╛рой рооро░рпБроирпНродрпБ', 'ро╡ро┐ро╖роорпН', 'роХроЯрпБроорпИропро╛рой родрпАроХрпНроХро╛ропроорпН', 'роОро▓рпБроорпНрокрпБ роорпБро▒ро┐ро╡рпБ', 'родро▓рпИропро┐ро▓рпН роХро╛ропроорпН'
    ],
    'bn': [
      'ржмрзБржХрзЗ ржмрзНржпржерж╛', 'рж╣рж╛рж░рзНржЯ ржЕрзНржпрж╛ржЯрж╛ржХ', 'рж╢рзНржмрж╛рж╕ ржирж┐рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛', 'рж╢рзНржмрж╛рж╕ ржирж┐рждрзЗ ржХрж╖рзНржЯ',
      'рждрзАржмрзНрж░ рж░ржХрзНрждржХрзНрж╖рж░ржг', 'ржЕржЬрзНржЮрж╛ржи', 'рж╕рзНржЯрзНрж░рзЛржХ', 'ржЦрж┐ржБржЪрзБржирж┐', 'ржЖрждрзНржорж╣рждрзНржпрж╛',
      'ржЕрждрж┐рж░рж┐ржХрзНржд ржбрзЛржЬ', 'ржмрж┐рж╖', 'рждрзАржмрзНрж░ ржкрзЛржбрж╝рж╛', 'рж╣рж╛ржбрж╝ ржнрж╛ржЩрж╛', 'ржорж╛ржерж╛ржпрж╝ ржЖржШрж╛ржд'
    ],
    'mr': [
      'рдЫрд╛рддреАрдд рджреБрдЦрдгреЗ', 'рд╣реГрджрдпрд╡рд┐рдХрд╛рд░рд╛рдЪрд╛ рдЭрдЯрдХрд╛', 'рд╢реНрд╡рд╛рд╕ рдШреЗрддрд╛ рдпреЗрдд рдирд╛рд╣реА', 'рд╢реНрд╡рд╛рд╕ рдШреЗрдгреНрдпрд╛рдд рдЕрдбрдЪрдг',
      'рддреАрд╡реНрд░ рд░рдХреНрддрд╕реНрд░рд╛рд╡', 'рдмреЗрд╢реБрджреНрдз', 'рдкрдХреНрд╖рд╛рдШрд╛рдд', 'рдЕрдкрд╕реНрдорд╛рд░', 'рдЖрддреНрдорд╣рддреНрдпрд╛',
      'рдЬрд╛рд╕реНрдд рдбреЛрд╕', 'рд╡рд┐рд╖', 'рддреАрд╡реНрд░ рднрд╛рдЬрдгреЗ', 'рд╣рд╛рдб рдореЛрдбрд▓реЗ', 'рдбреЛрдХреНрдпрд╛рд▓рд╛ рджреБрдЦрд╛рдкрдд'
    ]
  };

  // High-risk symptoms that need immediate medical attention
  static HIGH_RISK_SYMPTOMS = {
    'en': [
      'severe abdominal pain', 'blood in stool', 'blood in urine', 'severe headache',
      'high fever above 103', 'persistent vomiting', 'severe dehydration',
      'difficulty swallowing', 'severe diarrhea', 'loss of consciousness'
    ],
    'hi': [
      'рдЧрдВрднреАрд░ рдкреЗрдЯ рджрд░реНрдж', 'рдорд▓ рдореЗрдВ рдЦреВрди', 'рдкреЗрд╢рд╛рдм рдореЗрдВ рдЦреВрди', 'рдЧрдВрднреАрд░ рд╕рд┐рд░рджрд░реНрдж',
      '103 рд╕реЗ рдКрдкрд░ рддреЗрдЬ рдмреБрдЦрд╛рд░', 'рд▓рдЧрд╛рддрд╛рд░ рдЙрд▓реНрдЯреА', 'рдЧрдВрднреАрд░ рдирд┐рд░реНрдЬрд▓реАрдХрд░рдг',
      'рдирд┐рдЧрд▓рдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ', 'рдЧрдВрднреАрд░ рджрд╕реНрдд', 'рд╣реЛрд╢ рдЦреЛрдирд╛'
    ],
    'te': [
      'р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░Хр░бр▒Бр░кр▒Б р░ир▒Кр░кр▒Нр░кр░┐', 'р░ор░▓р░Вр░▓р▒Л р░░р░Хр▒Нр░др░В', 'р░ор▒Вр░др▒Нр░░р░Вр░▓р▒Л р░░р░Хр▒Нр░др░В', 'р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░др░▓р░ир▒Кр░кр▒Нр░кр░┐',
      '103 р░Хр░Вр░Яр▒З р░Ор░Хр▒Нр░Хр▒Бр░╡ р░Ьр▒Нр░╡р░░р░В', 'р░ир░┐р░░р░Вр░др░░ р░╡р░╛р░Вр░др▒Бр░▓р▒Б', 'р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░ир░┐р░░р▒Нр░Ьр░▓р▒Ар░Хр░░р░г',
      'р░ор░┐р░Вр░Чр░бр░Вр░▓р▒Л р░Зр░мр▒Нр░мр░Вр░жр░┐', 'р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░Ер░др░┐р░╕р░╛р░░р░В', 'р░╕р▒Нр░кр▒Гр░╣ р░Хр▒Лр░▓р▒Нр░кр▒Лр░╡р░бр░В'
    ]
  };

  // Check if input contains emergency keywords
  static async checkEmergencyKeywords(text, language = 'en') {
    try {
      const lowerText = text.toLowerCase();
      const criticalKeywords = this.CRITICAL_KEYWORDS[language] || this.CRITICAL_KEYWORDS['en'];
      const highRiskKeywords = this.HIGH_RISK_SYMPTOMS[language] || this.HIGH_RISK_SYMPTOMS['en'];

      // Check critical keywords first
      for (const keyword of criticalKeywords) {
        if (lowerText.includes(keyword.toLowerCase())) {
          return {
            isEmergency: true,
            severity: 'critical',
            keyword: keyword,
            response: this.getCriticalEmergencyResponse(language),
            action: 'immediate_emergency'
          };
        }
      }

      // Check high-risk symptoms
      for (const keyword of highRiskKeywords) {
        if (lowerText.includes(keyword.toLowerCase())) {
          return {
            isEmergency: true,
            severity: 'high',
            keyword: keyword,
            response: this.getHighRiskResponse(language),
            action: 'urgent_medical_attention'
          };
        }
      }

      // Check database emergency keywords
      const { data: dbKeywords, error } = await supabase
        .from('emergency_keywords')
        .select('*');

      if (!error && dbKeywords) {
        for (const dbKeyword of dbKeywords) {
          const keywordField = language === 'hi' ? 'keyword_hi' : 
                              language === 'te' ? 'keyword_te' :
                              language === 'ta' ? 'keyword_ta' :
                              language === 'bn' ? 'keyword_bn' :
                              language === 'mr' ? 'keyword_mr' : 'keyword';
          
          const keywordToCheck = dbKeyword[keywordField] || dbKeyword.keyword;
          
          if (keywordToCheck && lowerText.includes(keywordToCheck.toLowerCase())) {
            const responseField = language === 'hi' ? 'auto_response_hi' :
                                 language === 'te' ? 'auto_response_te' :
                                 language === 'ta' ? 'auto_response_ta' :
                                 language === 'bn' ? 'auto_response_bn' :
                                 language === 'mr' ? 'auto_response_mr' : 'auto_response';
            
            return {
              isEmergency: true,
              severity: dbKeyword.severity_level,
              keyword: keywordToCheck,
              response: dbKeyword[responseField] || dbKeyword.auto_response,
              action: 'emergency_protocol'
            };
          }
        }
      }

      return { isEmergency: false };
    } catch (error) {
      console.error('Emergency keyword check error:', error);
      return { isEmergency: false };
    }
  }

  // Get critical emergency response
  static getCriticalEmergencyResponse(language = 'en') {
    const responses = {
      'en': 'ЁЯЪи CRITICAL EMERGENCY ЁЯЪи\n\nCall 108 IMMEDIATELY or go to nearest emergency room NOW!\n\nDo not wait. This requires immediate medical attention.\n\nЁЯУЮ Emergency: 108\nЁЯПе Go to nearest hospital immediately',
      'hi': 'ЁЯЪи рдЧрдВрднреАрд░ рдЖрдкрд╛рддрдХрд╛рд▓ ЁЯЪи\n\nрддреБрд░рдВрдд 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ рдпрд╛ рдЕрднреА рдирд┐рдХрдЯрддрдо рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдХрдХреНрд╖ рдореЗрдВ рдЬрд╛рдПрдВ!\n\nрдкреНрд░рддреАрдХреНрд╖рд╛ рди рдХрд░реЗрдВред рдЗрд╕рдХреЗ рд▓рд┐рдП рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред\n\nЁЯУЮ рдЖрдкрд╛рддрдХрд╛рд▓: 108\nЁЯПе рддреБрд░рдВрдд рдирд┐рдХрдЯрддрдо рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд╛рдПрдВ',
      'te': 'ЁЯЪи р░Хр▒Нр░░р░┐р░Яр░┐р░Хр░▓р▒Н р░Ор░ор░░р▒Нр░Ьр▒Жр░ир▒Нр░╕р▒А ЁЯЪи\n\nр░╡р▒Жр░Вр░Яр░ир▒З 108р░Хр░┐ р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░Зр░кр▒Нр░кр▒Бр░бр▒З р░╕р░ор▒Ар░к р░Ор░ор░░р▒Нр░Ьр▒Жр░ир▒Нр░╕р▒А р░░р▒Вр░ор▒НтАМр░Хр▒Б р░╡р▒Жр░│р▒Нр░▓р░Вр░бр░┐!\n\nр░╡р▒Зр░Ър░┐ р░Йр░Вр░бр░╡р░жр▒Нр░жр▒Б. р░жр▒Ар░ир░┐р░Хр░┐ р░╡р▒Жр░Вр░Яр░ир▒З р░╡р▒Ир░жр▒Нр░п р░╕р░╣р░╛р░пр░В р░Ер░╡р░╕р░░р░В.\n\nЁЯУЮ р░Ер░др▒Нр░пр░╡р░╕р░░р░В: 108\nЁЯПе р░╡р▒Жр░Вр░Яр░ир▒З р░╕р░ор▒Ар░к р░Жр░╕р▒Бр░кр░др▒Нр░░р░┐р░Хр░┐ р░╡р▒Жр░│р▒Нр░▓р░Вр░бр░┐',
      'ta': 'ЁЯЪи роорпБроХрпНроХро┐ропрооро╛рой роЕро╡роЪро░роиро┐ро▓рпИ ЁЯЪи\n\nроЙроЯройроЯро┐ропро╛роХ 108 роР роЕро┤рпИроХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роЗрокрпНрокрпЛродрпЗ роЕро░рпБроХро┐ро▓рпБро│рпНро│ роЕро╡роЪро░ роЕро▒рпИроХрпНроХрпБроЪрпН роЪрпЖро▓рпНро▓рпБроЩрпНроХро│рпН!\n\nроХро╛родрпНродро┐ро░рпБроХрпНроХро╛родрпАро░рпНроХро│рпН. роЗродро▒рпНроХрпБ роЙроЯройроЯро┐ рооро░рпБродрпНродрпБро╡ роХро╡ройро┐рокрпНрокрпБ родрпЗро╡рпИ.\n\nЁЯУЮ роЕро╡роЪро░роорпН: 108\nЁЯПе роЙроЯройроЯро┐ропро╛роХ роЕро░рпБроХро┐ро▓рпБро│рпНро│ рооро░рпБродрпНродрпБро╡рооройрпИроХрпНроХрпБроЪрпН роЪрпЖро▓рпНро▓рпБроЩрпНроХро│рпН',
      'bn': 'ЁЯЪи ржЧрзБрж░рзБрждрж░ ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ ЁЯЪи\n\nржЕржмрж┐рж▓ржорзНржмрзЗ рззрзжрзо ржП ржХрж▓ ржХрж░рзБржи ржмрж╛ ржПржЦржиржЗ ржирж┐ржХржЯрждржо ржЬрж░рзБрж░рж┐ ржХржХрзНрж╖рзЗ ржпрж╛ржи!\n\nржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржмрзЗржи ржирж╛ред ржПрж░ ржЬржирзНржп ржЕржмрж┐рж▓ржорзНржмрзЗ ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕рзЗржмрж╛ ржкрзНрж░ржпрж╝рзЛржЬржиред\n\nЁЯУЮ ржЬрж░рзБрж░рж┐: рззрзжрзо\nЁЯПе ржЕржмрж┐рж▓ржорзНржмрзЗ ржирж┐ржХржЯрждржо рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрж╛ржи',
      'mr': 'ЁЯЪи рдЧрдВрднреАрд░ рдЖрдгреАрдмрд╛рдгреА ЁЯЪи\n\nрд▓рдЧреЗрдЪ 108 рд╡рд░ рдХреЙрд▓ рдХрд░рд╛ рдХрд┐рдВрд╡рд╛ рдЖрддрд╛ рдЬрд╡рд│рдЪреНрдпрд╛ рдЖрдгреАрдмрд╛рдгреА рдХрдХреНрд╖рд╛рдд рдЬрд╛!\n\nрд╡рд╛рдЯ рдкрд╛рд╣реВ рдирдХрд╛. рдпрд╛рд╕рд╛рдареА рддрд╛рддрдбреАрдиреЗ рд╡реИрджреНрдпрдХреАрдп рдорджрдд рдЖрд╡рд╢реНрдпрдХ рдЖрд╣реЗ.\n\nЁЯУЮ рдЖрдгреАрдмрд╛рдгреА: 108\nЁЯПе рд▓рдЧреЗрдЪ рдЬрд╡рд│рдЪреНрдпрд╛ рд░реБрдЧреНрдгрд╛рд▓рдпрд╛рдд рдЬрд╛'
    };
    
    return responses[language] || responses['en'];
  }

  // Get high-risk response
  static getHighRiskResponse(language = 'en') {
    const responses = {
      'en': 'тЪая╕П HIGH PRIORITY MEDICAL ATTENTION NEEDED тЪая╕П\n\nThis symptom requires urgent medical evaluation.\n\nPlease:\nтАв Contact your doctor immediately\nтАв Go to nearest healthcare center\nтАв Call 108 if symptoms worsen\n\nЁЯУЮ Emergency: 108\nЁЯПе Visit nearest PHC/hospital',
      'hi': 'тЪая╕П рдЙрдЪреНрдЪ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ тЪая╕П\n\nрдЗрд╕ рд▓рдХреНрд╖рдг рдХреЗ рд▓рд┐рдП рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдореВрд▓реНрдпрд╛рдВрдХрди рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред\n\nрдХреГрдкрдпрд╛:\nтАв рддреБрд░рдВрдд рдЕрдкрдиреЗ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ\nтАв рдирд┐рдХрдЯрддрдо рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░ рдЬрд╛рдПрдВ\nтАв рд▓рдХреНрд╖рдг рдмрд┐рдЧрдбрд╝рдиреЗ рдкрд░ 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ\n\nЁЯУЮ рдЖрдкрд╛рддрдХрд╛рд▓: 108\nЁЯПе рдирд┐рдХрдЯрддрдо PHC/рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд╛рдПрдВ',
      'te': 'тЪая╕П р░Ер░зр░┐р░Х р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░д р░╡р▒Ир░жр▒Нр░п р░╕р░╣р░╛р░пр░В р░Ер░╡р░╕р░░р░В тЪая╕П\n\nр░И р░▓р░Хр▒Нр░╖р░гр░╛р░ир░┐р░Хр░┐ р░Ер░др▒Нр░пр░╡р░╕р░░ р░╡р▒Ир░жр▒Нр░п р░ор▒Вр░▓р▒Нр░пр░╛р░Вр░Хр░ир░В р░Ер░╡р░╕р░░р░В.\n\nр░жр░пр░Ър▒Зр░╕р░┐:\nтАв р░╡р▒Жр░Вр░Яр░ир▒З р░ор▒А р░╡р▒Ир░жр▒Нр░пр▒Бр░бр░┐р░ир░┐ р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐\nтАв р░╕р░ор▒Ар░к р░Жр░░р▒Лр░Чр▒Нр░п р░Хр▒Зр░Вр░жр▒Нр░░р░╛р░ир░┐р░Хр░┐ р░╡р▒Жр░│р▒Нр░▓р░Вр░бр░┐\nтАв р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б р░др▒Ар░╡р▒Нр░░р░ор▒Ир░др▒З 108р░Хр░┐ р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐\n\nЁЯУЮ р░Ер░др▒Нр░пр░╡р░╕р░░р░В: 108\nЁЯПе р░╕р░ор▒Ар░к PHC/р░Жр░╕р▒Бр░кр░др▒Нр░░р░┐р░ир░┐ р░╕р░Вр░жр░░р▒Нр░╢р░┐р░Вр░Ър░Вр░бр░┐'
    };
    
    return responses[language] || responses['en'];
  }

  // Validate symptom checker input
  static validateSymptomInput(symptoms) {
    const errors = [];
    
    if (!symptoms || !Array.isArray(symptoms)) {
      errors.push('Symptoms must be provided as an array');
      return { isValid: false, errors };
    }
    
    if (symptoms.length === 0) {
      errors.push('At least one symptom must be provided');
      return { isValid: false, errors };
    }
    
    if (symptoms.length > 10) {
      errors.push('Maximum 10 symptoms allowed per query');
      return { isValid: false, errors };
    }
    
    // Check for inappropriate content
    const inappropriateKeywords = ['drug', 'illegal', 'suicide method', 'self harm'];
    for (const symptom of symptoms) {
      if (typeof symptom !== 'string') {
        errors.push('All symptoms must be text strings');
        continue;
      }
      
      if (symptom.length > 200) {
        errors.push('Each symptom description must be under 200 characters');
      }
      
      const lowerSymptom = symptom.toLowerCase();
      for (const keyword of inappropriateKeywords) {
        if (lowerSymptom.includes(keyword)) {
          errors.push('Query contains inappropriate content. Please contact a healthcare professional directly.');
        }
      }
    }
    
    return { isValid: errors.length === 0, errors };
  }

  // Add safety disclaimer to all responses
  static addSafetyDisclaimer(response, language = 'en') {
    const disclaimers = {
      'en': '\n\nтЪая╕П IMPORTANT: This is for awareness only, not medical diagnosis. Always consult healthcare professionals for medical advice.',
      'hi': '\n\nтЪая╕П рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдпрд╣ рдХреЗрд╡рд▓ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рд╣реИ, рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдирд┐рджрд╛рди рдирд╣реАрдВред рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд▓рд╛рд╣ рдХреЗ рд▓рд┐рдП рд╣рдореЗрд╢рд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░реЛрдВ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред',
      'te': '\n\nтЪая╕П р░ор▒Бр░Цр▒Нр░пр░ор▒Ир░ир░жр░┐: р░Зр░жр░┐ р░Хр▒Зр░╡р░▓р░В р░Ер░╡р░Чр░╛р░╣р░и р░Хр▒Лр░╕р░В, р░╡р▒Ир░жр▒Нр░п р░ир░┐р░░р▒Нр░зр░╛р░░р░г р░Хр░╛р░жр▒Б. р░╡р▒Ир░жр▒Нр░п р░╕р░▓р░╣р░╛ р░Хр▒Лр░╕р░В р░Ор░▓р▒Нр░▓р░кр▒Нр░кр▒Бр░бр▒В р░Жр░░р▒Лр░Чр▒Нр░п р░ир░┐р░кр▒Бр░гр▒Бр░▓р░ир▒Б р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐ред',
      'ta': '\n\nтЪая╕П роорпБроХрпНроХро┐ропроорпН: роЗродрпБ ро╡ро┐ро┤ро┐рокрпНрокрпБрогро░рпНро╡рпБроХрпНроХро╛роХ роороЯрпНроЯрпБроорпЗ, рооро░рпБродрпНродрпБро╡ роирпЛропро▒ро┐родро▓рпН роЕро▓рпНро▓. рооро░рпБродрпНродрпБро╡ роЖро▓рпЛроЪройрпИроХрпНроХрпБ роОрокрпНрокрпЛродрпБроорпН роЪрпБроХро╛родро╛ро░ роиро┐рокрпБрогро░рпНроХро│рпИ роЕрогрпБроХро╡рпБроорпН.',
      'bn': '\n\nтЪая╕П ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг: ржПржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржЪрзЗрждржирждрж╛рж░ ржЬржирзНржп, ржЪрж┐ржХрж┐рзОрж╕рж╛ ржирж┐рж░рзНржгржпрж╝ ржиржпрж╝ред ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрж░рж╛ржорж░рзНрж╢рзЗрж░ ржЬржирзНржп рж╕рж░рзНржмржжрж╛ рж╕рзНржмрж╛рж╕рзНржерзНржпрж╕рзЗржмрж╛ ржкрзЗрж╢рж╛ржжрж╛рж░ржжрзЗрж░ рж╕рж╛ржерзЗ ржкрж░рж╛ржорж░рзНрж╢ ржХрж░рзБржиред',
      'mr': '\n\nтЪая╕П рдорд╣рддреНрддреНрд╡рд╛рдЪреЗ: рд╣реЗ рдлрдХреНрдд рдЬрд╛рдЧрд░реВрдХрддреЗрд╕рд╛рдареА рдЖрд╣реЗ, рд╡реИрджреНрдпрдХреАрдп рдирд┐рджрд╛рди рдирд╛рд╣реА. рд╡реИрджреНрдпрдХреАрдп рд╕рд▓реНрд▓реНрдпрд╛рд╕рд╛рдареА рдиреЗрд╣рдореА рдЖрд░реЛрдЧреНрдп рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХрд╛рдВрдЪрд╛ рд╕рд▓реНрд▓рд╛ рдШреНрдпрд╛.'
    };
    
    return response + (disclaimers[language] || disclaimers['en']);
  }

  // Log safety events for monitoring
  static async logSafetyEvent(eventData) {
    try {
      const { error } = await supabase
        .from('safety_events')
        .insert({
          event_type: eventData.type,
          severity: eventData.severity,
          user_input: eventData.input,
          triggered_keyword: eventData.keyword,
          response_given: eventData.response,
          patient_id: eventData.patient_id,
          language: eventData.language,
          created_at: new Date().toISOString()
        });

      if (error) {
        console.error('Failed to log safety event:', error);
      }
    } catch (error) {
      console.error('Safety event logging error:', error);
    }
  }

  // Rate limiting for symptom checker
  static async checkRateLimit(patientId, timeWindow = 3600000) { // 1 hour
    try {
      const cutoffTime = new Date(Date.now() - timeWindow);
      
      const { data: recentQueries, error } = await supabase
        .from('symptom_queries')
        .select('id')
        .eq('patient_id', patientId)
        .gte('created_at', cutoffTime.toISOString());

      if (error) throw error;

      const queryCount = recentQueries?.length || 0;
      const maxQueries = 20; // Max 20 queries per hour

      return {
        allowed: queryCount < maxQueries,
        remaining: Math.max(0, maxQueries - queryCount),
        resetTime: new Date(Date.now() + timeWindow)
      };
    } catch (error) {
      console.error('Rate limit check error:', error);
      return { allowed: true, remaining: 20 }; // Allow on error
    }
  }
}

module.exports = SafetyGuards;
